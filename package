#!/bin/bash

##############################################################################
##                                                                          ##
## Tool to build and (if requested) to deploy OGRE library for *NIX         ##
## !DO NOT RUN THIS SCRIPT AS ROOT!                                         ##
##                                                                          ##
##############################################################################




# Do some preparations...
if [[ $OSTYPE == "darwin"* ]]; then
    MACOS=true
    CHECKMARK="\xE2\x9C\x94"
    CROSSMARK="\xE2\x9C\x96"
    LINEBEG="\xE2\x98\x85"
elif (locale | grep -e 'utf8' -e 'UTF-8') >/dev/null 2>&1; then
    CHECKMARK="\u2714"
    CROSSMARK="\u2716"
    LINEBEG="\u2605"
else
    CHECKMARK="[Y]"
    CROSSMARK="[X]"
    LINEBEG="::"
fi
CHECKMARK="\e[1;32m$CHECKMARK\e[0m"
CROSSMARK="\e[1;91m$CROSSMARK\e[0m"
LINEBEG="\e[1;34m$LINEBEG\e[0m"
CWD=$PWD




# At first, ensure that we are not root as some commands we execute are not recommended
# to be called with root permissions
if [[ $(id -u) -eq 0 ]]; then
    printf " $CROSSMARK Please do not run this script with root permissions.\n"
    exit;
fi




# Then, check, if we shall only do the build
BUILD_ONLY=$1




# Then, check for the current OS type and define build/packaging dependencies
printf "$LINEBEG Checking for operating system type...\n"

INSTALLSYSTEMS=(APTGET)
isa=${#INSTALLSYSTEMS[@]}
for ((i=0; i < $isa; i++)); do
    ISE_NAME=${INSTALLSYSTEMS[i]}
    declare -r ${ISE_NAME}=$i
done

if [ $OSTYPE == "linux-gnu" ]; then
    # Linux
    printf " $CHECKMARK Linux is supported, but we need to check for your installed distribution...\n"
    
    # Get current Linux distribution
    if [ -f /etc/arch-release ]; then
        DISTRO="arch"
    else
        DISTRO=$(lsb_release -is)
    fi
    DISTRO=${DISTRO,,} # Make distro name lower-case
    if [ $DISTRO == "debian" ] || [ $DISTRO == "ubuntu" ]; then
        if [ $DISTRO == "ubuntu" ]; then
            printf " $CHECKMARK Ubuntu is supported. Using \e[1mapt-get\e[0m install system...\n"
        else
            printf " $CHECKMARK Debian is supported. Using \e[1mapt-get\e[0m install system...\n"
        fi

        #CODENAME=`lsb_release --codename | cut -f2`
        INSTALLSYSTEM=${INSTALLSYSTEMS[$APTGET]}
        PACKAGES="git build-essential cmake dput dh-make fakeroot devscripts lintian perl libfreetype6-dev libfreeimage-dev libsdl2-dev libx11-dev libgl1-mesa-dev libxrandr-dev libxt-dev libxaw7-dev zlib1g-dev"
    else
        printf " $CROSSMARK Your distribution '$DISTRO' is not supported. Aborting.\n"
        exit 1 
    fi
else
    printf " $CROSSMARK Your OS '$OSTYPE' is not supported. Aborting.\n"
    exit 1 
fi




# Install all required packages...
if [ $INSTALLSYSTEM ]; then
    printf "$LINEBEG Installing required packages...\n"

    if [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$APTGET]} ]; then
        sudo apt-get update -qy
        sudo apt-get upgrade -qy
        sudo apt-get install -qy  --no-install-recommends $PACKAGES
	    sudo apt-get clean
    fi

    printf " $CHECKMARK Finished! Please check the above command line output in order to verify that everything was okay.\n"
fi




# Sync submodules
git submodule sync
git submodule update --init --recursive --remote




# Link imgui sources with OGRE Overlay
rm -rf ogre/Components/Overlay/src/imgui
ln -s imgui ogre/Components/Overlay/src/imgui





if [ ! "$BUILD_ONLY" = "y" ]
    # Create Debian package
    if [ -d build ]; then rm -rf build; fi
    mkdir build
    cd build
    cmake ../cmake/
    make package
    cd ..
fi;




# Reset OGRE Overlay code
m -R Components/Overlay/src/imgui
git -C ogre reset --hard

