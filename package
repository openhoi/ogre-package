#!/bin/bash

##############################################################################
##                                                                          ##
## Tool to build and (if requested) to deploy OGRE library for *NIX         ##
## !DO NOT RUN THIS SCRIPT AS ROOT!                                         ##
##                                                                          ##
##############################################################################




# Do some preparations...
if [[ $OSTYPE == "darwin"* ]]; then
    MACOS=true
    CHECKMARK="\xE2\x9C\x94"
    CROSSMARK="\xE2\x9C\x96"
    LINEBEG="\xE2\x98\x85"
elif (locale | grep -e 'utf8' -e 'UTF-8') >/dev/null 2>&1; then
    CHECKMARK="\u2714"
    CROSSMARK="\u2716"
    LINEBEG="\u2605"
else
    CHECKMARK="[Y]"
    CROSSMARK="[X]"
    LINEBEG="::"
fi
CHECKMARK="\e[1;32m$CHECKMARK\e[0m"
CROSSMARK="\e[1;91m$CROSSMARK\e[0m"
LINEBEG="\e[1;34m$LINEBEG\e[0m"
CWD=$PWD




# At first, ensure that we are not root as some commands we execute are not recommended
# to be called with root permissions. This check won't be performed in case we are inside Docker!
if [ -f /.dockerenv ]; then
    DOCKER="true"
    printf "$LINEBEG We are inside a Docker container!\n"
else
    if [[ $(id -u) -eq 0 ]]; then
        printf " $CROSSMARK Please do not run this script with root permissions.\n"
        exit;
    fi
fi




# Then, check, if we shall only do the build
BUILD_ONLY=$1




# Then, check for the current OS type and define build/packaging dependencies
printf "$LINEBEG Checking for operating system type...\n"

INSTALLSYSTEMS=(PACMAN APTGET HOMEBREW PKG YUM)
isa=${#INSTALLSYSTEMS[@]}
for ((i=0; i < $isa; i++)); do
    ISE_NAME=${INSTALLSYSTEMS[i]}
    declare -r ${ISE_NAME}=$i
done

PACKAGE_FILETYPE=".tar.gz"
PACKAGE_FILENAME="ogre_%VERSION%$PACKAGE_FILETYPE"
if [ $OSTYPE == "linux-gnu" ]; then
    # Linux
    printf " $CHECKMARK Linux is supported, but we need to check for your installed distribution...\n"
    
    # Get current Linux distribution
    if [ -f /etc/arch-release ]; then
        DISTRO="arch"
    else
        DISTRO=$(lsb_release -is)
    fi
    DISTRO=${DISTRO,,} # Make distro name lower-case
    if [[ $DISTRO == "arch" ]]; then
        printf " $CHECKMARK Arch Linux is supported. Using \e[1mpacman\e[0m install system...\n"

        INSTALLSYSTEM=${INSTALLSYSTEMS[$PACMAN]}
        PACKAGES="base-devel git cmake sdl2 ninja"
        DIST_IDENTIFIER="arch_latest"
    elif [[ $DISTRO == "debian" ]] || [[ $DISTRO == "ubuntu" ]]; then
        if [ $DISTRO == "ubuntu" ]; then
            printf " $CHECKMARK Ubuntu is supported. Using \e[1mapt-get\e[0m install system...\n"
        else
            printf " $CHECKMARK Debian is supported. Using \e[1mapt-get\e[0m install system...\n"
        fi

        CODENAME=`lsb_release --codename | cut -f2`
        INSTALLSYSTEM=${INSTALLSYSTEMS[$APTGET]}
        PACKAGES="git build-essential cmake dput dh-make fakeroot devscripts lintian libfreetype6-dev libfreeimage-dev libsdl2-dev libx11-dev libgl1-mesa-dev libxrandr-dev libxt-dev libxaw7-dev ninja-build"
        DIST_IDENTIFIER="${DISTRO}_$DISTRO_$CODENAME"
        PACKAGE_FILETYPE=".deb"
        PACKAGE_FILENAME="ogre_%VERSION%$PACKAGE_FILETYPE"
    elif [[ $DISTRO == "fedora" ]]; then
        printf " $CHECKMARK Fedora is supported. Using \e[1yum\e[0m install system...\n"

        VERSION=`lsb_release --release | cut -f2`
        INSTALLSYSTEM=${INSTALLSYSTEMS[$YUM]}
        PACKAGES="git cmake rpm-build freetype-devel freeimage-devel SDL2-devel libX11-devel ninja-build"
        DIST_IDENTIFIER="${DISTRO}_$DISTRO_$VERSION"
        PACKAGE_FILETYPE=".rpm"
        PACKAGE_FILENAME="ogre-%VERSION%-1.src$PACKAGE_FILETYPE"
    else
        printf " $CROSSMARK Your distribution '$DISTRO' is not supported. Aborting.\n"
        exit 1 
    fi
elif [[ $MACOS == true ]]; then
    printf " $CHECKMARK macOS is supported.\n"
    
    INSTALLSYSTEM=${INSTALLSYSTEMS[$HOMEBREW]}
    PACKAGES=(cmake freeimage freetype sdl2)
else
    printf " $CROSSMARK Your OS '$OSTYPE' is not supported. Aborting.\n"
    exit 1 
fi




# Install all required packages...
if [ $INSTALLSYSTEM ]; then
    printf "$LINEBEG Installing required packages...\n"

    if [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$PACMAN]} ]; then
        sudo pacman -Syu --noconfirm
        sudo pacman -S $PACKAGES --noconfirm --needed

        if [ $AUR_PACKAGES ]; then
            mkdir --parents build/pacman_aur
            for i in "${AUR_PACKAGES[@]}"
            do
                if [ ! -d "tmp/$i" ]; then
                    git clone https://aur.archlinux.org/$i.git build/pacman_aur/$i
                else
                    git -C build/pacman_aur/$i pull
                fi
                pushd build/pacman_aur/$i
                rm *.pkg.tar.xz
                makepkg -Acs --noconfirm --needed
                popd >/dev/null
                sudo pacman -U $(ls build/pacman_aur/$i/*.pkg.tar.xz | head -1) --noconfirm
            done
        fi
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$APTGET]} ]; then
        sudo apt-get update -qy
        sudo apt-get upgrade -qy
        sudo apt-get install -qy --no-install-recommends $PACKAGES
        sudo apt-get clean
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$PKG]} ]; then
        sudo freebsd-update fetch --not-running-from-cron
        sudo freebsd-update install --not-running-from-cron
        env ASSUME_ALWAYS_YES=YES pkg bootstrap
        sudo pkg -N install $PACKAGES
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$HOMEBREW]} ]; then
        command -v brew >/dev/null 2>&1 || { /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; }
        for i in "${PACKAGES[@]}"
        do
            brew ls --versions $i && brew upgrade $i || brew install $i
        done
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$YUM]} ]; then
        sudo yum -y update
        sudo yum -y install $PACKAGES
        sudo package-cleanup --leaves --all
    fi

    printf " $CHECKMARK Finished! Please check the above command line output in order to verify that everything was okay.\n"
fi




# Cleanup and preparations
printf "$LINEBEG Cleanup and preparations...\n"

source version
OGRE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH
OGRE_TAG=v$OGRE_VERSION

if [ "$DOCKER" != "true" ]; then
  if [ -d build ]; then
      # Reset OGRE Overlay code
      rm -R ogre/Components/Overlay/src/imgui
  fi
  git -C ogre reset --hard $OGRE_TAG
fi

# Sync submodules
git submodule update --init --recursive

# Link imgui sources with OGRE Overlay
rm -rf ogre/Components/Overlay/src/imgui
ln -s imgui ogre/Components/Overlay/src/imgui




# Compile OGRE
printf "$LINEBEG Compiling OGRE...\n"

if [ "$DOCKER" == "true" ]; then
 # Patch OGRE SO version
 sed -i -E "s/(set\s*\(\s*OGRE_SOVERSION\s+)(\\\$\{OGRE_VERSION\})(\s*\))/\1\"\2-openhoi\"\3/" ogre/CMakeLists.txt
 # Ensure that no SO symlink will be created
 sed -i -E "s/(\s+LIBRARY\s+DESTINATION\s+.+)\1 NAMELINK_SKIP/g" ogre/CMake/Utils/OgreConfigTargets.cmake
fi

if [ -d build ]; then rm -rf build; fi
mkdir build
cd build
cmake -DOGRE_USE_BOOST=0 -DOGRE_CONFIG_THREAD_PROVIDER=stl -DOGRE_CONFIG_THREADS=2 -DOGREDEPS_BUILD_RAPIDJSON=ON -DOGREDEPS_BUILD_SDL2=ON -DOGREDEPS_INSTALL_DEV=ON\
      -DOGRE_ASSERT_MODE=1 -DOGRE_BUILD_COMPONENT_HLMS_PBS=ON -DOGRE_BUILD_COMPONENT_HLMS_PBS_MOBILE=OFF -DOGRE_BUILD_COMPONENT_HLMS_UNLIT=ON \
      -DOGRE_BUILD_COMPONENT_HLMS_UNLIT_MOBILE=OFF -DOGRE_BUILD_COMPONENT_MESHLODGENERATOR=ON -DOGRE_BUILD_COMPONENT_OVERLAY=ON DOGRE_BUILD_COMPONENT_OVERLAY_IMGUI=ON \
      -DOGRE_BUILD_COMPONENT_PAGING=OFF -DOGRE_BUILD_PLUGIN_PFX=ON -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON -DOGRE_BUILD_RENDERSYSTEM_GLES=ON -DOGRE_BUILD_SAMPLES2=OFF \
      -DOGRE_BUILD_TESTS=OFF -DOGRE_BUILD_TOOLS=OFF -DOGRE_CONFIG_ENABLE_JSON=ON -DOGRE_INSTALL_DOCS=OFF -DOGRE_INSTALL_SAMPLES=OFF -DOGRE_INSTALL_TOOLS=OFF \
      -DOGRE_LEGACY_ANIMATION=ON -DOGRE_SIMD_NEON=ON -DOGRE_SIMD_SSE2=ON -DOGRE_STATIC=OFF -DCMAKE_BUILD_TYPE=Release -G Ninja ../cmake/
ninja
if [ "$BUILD_ONLY" == "y" ]; then
    sudo ninja install
else
    rm ogre/bin/*.cfg
    rm ogre/lib/*.so
    ninja package
fi



# Copy package files to new directory
if [ "$BUILD_ONLY" == "y" ]; then
  cd ..
else
  if [ "$DOCKER" == "true" ]; then
      BINARY_NAME=ogre_${DIST_IDENTIFIER}_$OGRE_VERSION$PACKAGE_FILETYPE
      BINARY_PATH=/openhoi-package/$BINARY_NAME
  else
      if [ -d package ]; then rm -rf package; fi
      mkdir package
      BINARY_NAME=ogre_$OGRE_VERSION$PACKAGE_FILETYPE
      BINARY_PATH=package/$BINARY_NAME
  fi
  printf "$LINEBEG Copying OGRE binary to $BINARY_PATH...\n"
  cp ${PACKAGE_FILENAME/\%VERSION\%/$OGRE_VERSION} $BINARY_PATH
  cd ..
fi



# Reset OGRE Overlay code
printf "$LINEBEG Cleanup...\n"

rm -R ogre/Components/Overlay/src/imgui
git -C ogre reset --hard $OGRE_TAG